The code that is being configured when axtls is compiled is stored in the axtlswrap, crypto, httpd, and ssl directories.  So I modified the Makefiles in these directories, adding the preprocess: goal.  When called, this runs gcc with the -E flag for each file in the directory, creating the preprocessed code and storing it in .i files, each one corresponding to the .c file of the same name.  For these gcc calls I had to include some files in other directories using the -I flag (the necessary includes can be found in axtls_2_1_4/config/makefile.conf being added to CFLAGS).  I also added -@rm -f *.i to the clean:: goal so that the .i files would be removed after running each config (this may not be necessary, as gcc will probably just overwrite each existing .i file with the new one, but it's nice to have available).  

I also modified the main axtls Makefile so that when the default goal target: is called, it will run my all of my preprocess goals in addition to the normal build goals.  

I changed the driver.sh script in the elif [[ "${action}" == "build" ]] section, adding a counter k to keep track of what config the script is on without having to parse it from the existing variables, along with commands to move the created .i files to a separate directory.  They are stored in axtls_2_1_4/logs/k (where k is the config number).
Note: driver.sh must be run from /home/vagrant/axtls_2_1_4
To run cppcheck on all the log files, I recommend using cppcheck -q $(pwd)/*/*.i &> out.txt  from the logs directory.  This will output the results of cppcheck to a file out.txt in that directory.
Axtls has 1 bug, an uninitialized variable 'i' in the RNG_initilaize method of crypto_misc.c, but this is not a configuration bug specifically, it's just a bug that only shows up in about half of the configurations.  When run on the entire axtls_2_1_4 folder, cppcheck finds several bugs in the /config/scripts/config folder, but these are part of the configuration system and not of axtls itself.  
